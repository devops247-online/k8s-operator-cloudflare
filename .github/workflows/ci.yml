name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GOLANGCI_LINT_VERSION: 'v1.64.8'

jobs:
  # ==================== PRE-COMMIT JOB ====================
  pre-commit:
    name: 🔍 Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install pre-commit
        run: |
          pip install pre-commit
          pre-commit --version

      - name: 🔍 Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure

  # ==================== CODE QUALITY JOB ====================
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: 📥 Download dependencies
        run: |
          go mod download
          go mod tidy

      - name: 🎨 Check code formatting
        run: |
          go fmt ./...
          if [ -n "$(git diff --name-only)" ]; then
            echo "Code is not formatted. Run 'go fmt ./...' to fix."
            git diff
            exit 1
          fi

      - name: 🔍 Run go vet
        run: go vet ./...

      - name: 🧹 Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=10m

  # ==================== TESTING JOB ====================
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: 📥 Download dependencies
        run: go mod download

      - name: 🧪 Run unit tests
        run: make test

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./cover.out
          flags: unittests
          name: codecov-umbrella
        if: hashFiles('cover.out') != ''
        continue-on-error: true

  # ==================== SECURITY JOB ====================
  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: 🔐 Install gosec
        run: |
          curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: 🔐 Run security scan
        run: |
          gosec -fmt sarif -out gosec.sarif ./... || echo "Gosec scan completed with findings"

      - name: 🔍 Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
        if: hashFiles('gosec.sarif') != ''

  # ==================== BUILD JOB ====================
  build:
    name: 🔨 Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test, security]
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: 📥 Download dependencies
        run: go mod download

      - name: 🔨 Build manager binary
        run: |
          make build
          ls -la bin/

      - name: 🐳 Build Docker image
        run: make docker-build IMG=test-image:latest

      - name: 🔍 Inspect Docker image
        run: |
          docker inspect test-image:latest
          echo "✅ Docker image built successfully"

      - name: 📦 Save Docker image
        run: |
          docker save test-image:latest > test-image.tar

      - name: 📤 Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: test-image.tar
          retention-days: 1

  # ==================== MANIFESTS JOB ====================
  manifests:
    name: 📝 Validate Manifests
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: 📥 Download dependencies
        run: go mod download

      - name: 📝 Generate manifests
        run: make manifests generate

      - name: 🔍 Check generated files
        run: |
          if [ -n "$(git diff --name-only)" ]; then
            echo "❌ Generated files are out of sync. Please run 'make manifests generate' and commit the changes."
            git diff
            exit 1
          fi
          echo "✅ Generated files are up to date"

      - name: 🔧 Build installer
        run: |
          make build-installer IMG=test-image:latest
          ls -la dist/

      - name: 🔍 Validate Kubernetes manifests
        run: |
          # Install kubectl if not available
          if ! command -v kubectl &> /dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          kubectl --dry-run=client apply -f dist/install.yaml
          echo "✅ Kubernetes manifests are valid"

      - name: 📤 Upload manifest artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-manifests
          path: dist/
          retention-days: 1

  # ==================== E2E TESTING JOB ====================
  e2e-test:
    name: 🎯 E2E Tests
    runs-on: ubuntu-latest
    needs: [build, manifests]
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: 📥 Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: 🐳 Load Docker image
        run: |
          docker load < test-image.tar
          docker images

      - name: ⚙️ Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version

      - name: 🧪 Run E2E tests
        run: |
          export CERT_MANAGER_INSTALL_SKIP=true
          make test-e2e
        timeout-minutes: 30

  # ==================== FINAL VALIDATION JOB ====================
  validation:
    name: ✅ Final Validation
    runs-on: ubuntu-latest
    needs: [build, manifests, e2e-test]
    steps:
      - name: 🎉 Pipeline Success Summary
        run: |
          echo "🎉 All CI Pipeline jobs completed successfully!"
          echo ""
          echo "📋 Jobs Summary:"
          echo "  ✅ Pre-commit checks: PASSED"
          echo "  ✅ Code quality: PASSED"
          echo "  ✅ Unit tests: PASSED"
          echo "  ✅ Security scan: PASSED"
          echo "  ✅ Binary build: PASSED"
          echo "  ✅ Docker build: PASSED"
          echo "  ✅ Manifest validation: PASSED"
          echo "  ✅ E2E tests: PASSED"
          echo ""
          echo "🚀 Ready for deployment!"
