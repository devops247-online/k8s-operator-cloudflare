---
# Default values for cloudflare-dns-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cloudflare-dns-operator
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using fullname template
  name: ""

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true

podAnnotations: {}
podLabels: {}

# Pod Security Context
# Compliant with Pod Security Standards "restricted" profile
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532
  fsGroupChangePolicy: "OnRootMismatch"
  seccompProfile:
    type: RuntimeDefault

# Container Security Context
# Compliant with Pod Security Standards "restricted" profile
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  # Metrics port
  metricsPort: 8081

resources:
  limits:
    cpu: 500m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 64Mi

# Liveness and readiness probe configuration
livenessProbe:
  httpGet:
    path: /healthz
    port: 8081
  initialDelaySeconds: 15
  periodSeconds: 20

readinessProbe:
  httpGet:
    path: /readyz
    port: 8081
  initialDelaySeconds: 5
  periodSeconds: 10

nodeSelector: {}

tolerations: []

affinity: {}

# Cloudflare configuration
cloudflare:
  # Cloudflare account email
  email: ""
  # Cloudflare API Token (if not using existing secret)
  apiToken: ""
  # Name of existing secret containing API token
  apiTokenSecretName: ""
  # Key in the secret containing API token
  apiTokenSecretKey: "api-token"  # pragma: allowlist secret
  # Cloudflare Zone ID (optional, can be auto-discovered)
  zoneId: ""

# Secret Management Configuration
secrets:
  # Secret provider: kubernetes, external-secrets-operator, vault
  provider: kubernetes

  # External Secrets Operator configuration
  externalSecretsOperator:
    # Enable External Secrets Operator integration
    enabled: false
    # Secret store configuration
    secretStore:
      name: cloudflare-secret-store
      kind: SecretStore  # SecretStore or ClusterSecretStore
      # Backend type: vault, aws-secrets-manager, azure-keyvault, etc.
      backend: vault
    # Refresh interval for secrets
    refreshInterval: 1h
    # External secret configuration
    externalSecret:
      name: cloudflare-credentials
      # Data mapping from external secret to Kubernetes secret
      dataFrom:
        - extract:
            key: cloudflare/credentials

  # Vault integration configuration
  vault:
    # Enable Vault integration
    enabled: false
    # Vault server address
    address: https://vault.example.com
    # Authentication method: kubernetes, token, approle
    authMethod: kubernetes
    # Vault path for Cloudflare secrets
    path: secret/data/cloudflare
    # Kubernetes auth configuration
    kubernetes:
      role: cloudflare-operator
      serviceAccount: cloudflare-dns-operator
    # Secret rotation
    rotation:
      enabled: false
      schedule: "0 0 * * 0"  # Weekly rotation

  # Secret encryption at rest
  encryption:
    # Enable encryption at rest (requires encrypted etcd)
    enabled: false
    # KMS provider configuration
    kmsProvider: ""

  # Secret access auditing
  auditing:
    # Enable secret access auditing
    enabled: false
    # Audit log destination
    destination: stdout  # stdout, file, syslog

# Operator configuration
operator:
  # Log level (debug, info, warn, error)
  logLevel: info
  # Enable leader election for controller manager
  leaderElection: true
  # Metrics bind address
  metricsBindAddress: ":8081"
  # Health probe bind address
  healthProbeBindAddress: ":8081"
  # Webhook port
  webhookPort: 9443
  # Enable webhook
  enableWebhook: false

# CRD installation
crds:
  # Install CRDs as part of the Helm release
  install: true
  # Keep CRDs on chart uninstall
  keep: true

# Pod Security Standards configuration
podSecurityStandards:
  # Enable Pod Security Standards labels on namespace
  enabled: true
  # Create namespace with Pod Security Standards labels
  createNamespace: false
  # Enforce mode - blocks non-compliant pods
  enforce: restricted
  enforceVersion: latest
  # Audit mode - logs policy violations
  audit: restricted
  auditVersion: latest
  # Warn mode - warns about policy violations
  warn: restricted
  warnVersion: latest

# Network Policy configuration
networkPolicy:
  # Enable NetworkPolicy
  enabled: true
  # Prometheus namespace for metrics scraping
  prometheusNamespace: prometheus-system
  # Prometheus pod labels
  prometheusPodLabels:
    app.kubernetes.io/name: prometheus

# Monitoring
monitoring:
  # Enable ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    honorLabels: true
    metricRelabelings: []
    relabelings: []

  ingress: []
  egress:
    - ports:
        - port: 443
          protocol: TCP
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP

# Security Hardening Configuration
securityHardening:
  # Image security scanning
  imageScanning:
    # Enable image vulnerability scanning
    enabled: false
    # Scanner to use: trivy, snyk, grype
    scanner: trivy
    # Fail on critical vulnerabilities
    failOnCritical: true
    # Severity levels to report: CRITICAL, HIGH, MEDIUM, LOW
    severityLevels:
      - CRITICAL
      - HIGH
    # Ignore specific CVEs
    ignoreCVEs: []

  # Image signing and verification
  imageSigning:
    # Enable image signing verification
    enabled: false
    # Cosign public key for verification
    cosignPublicKey: ""
    # Policy enforcement mode: enforce, warn, disabled
    policyMode: enforce

  # Admission controller policies
  admissionController:
    # Enable admission controller policies
    enabled: false
    # Policy engine: opa, kyverno, polaris
    engine: opa
    # Policy rules
    policies:
      # Require security contexts
      requireSecurityContext: true
      # Disallow privileged containers
      disallowPrivileged: true
      # Require non-root user
      requireNonRoot: true
      # Require read-only root filesystem
      requireReadOnlyRootFS: true

  # Runtime security monitoring
  runtimeSecurity:
    # Enable runtime security monitoring
    enabled: false
    # Runtime security provider: falco, sysdig
    provider: falco
    # Alert on suspicious activity
    alerting:
      enabled: false
      webhook: ""

  # Compliance and benchmarks
  compliance:
    # Enable compliance checking
    enabled: false
    # Benchmarks to check: cis-kubernetes, nsa-kubernetes
    benchmarks:
      - cis-kubernetes
      - nsa-kubernetes
    # Generate compliance reports
    reporting:
      enabled: false
      schedule: "0 0 * * 0"  # Weekly

  # Security monitoring hooks
  monitoring:
    # Enable security event monitoring
    enabled: false
    # Export security metrics
    metrics:
      enabled: false
      port: 9091
    # Security event webhook
    webhook:
      enabled: false
      url: ""

# Multi-tenancy configuration
multitenancy:
  # Enable multi-tenancy features
  enabled: false

  # Deployment scope: cluster, namespace, multi-namespace
  scope: cluster

  # Specific namespaces to watch (only for multi-namespace scope)
  watchNamespaces: []

  # Tenant isolation
  networkPolicies:
    # Enable network policies for tenant isolation
    enabled: false

  # Resource management per tenant
  resourceQuotas:
    # Enable resource quotas for tenants
    enabled: false
    limits:
      # Maximum number of CloudflareRecord resources per namespace
      maxRecords: 100
      # CPU and memory limits for tenant workloads
      cpu: "1000m"
      memory: "512Mi"

  # Tenant validation
  validation:
    # Enforce that CloudflareRecord can only use secrets from same namespace
    enforceNamespaceSecrets: true
    # Validate zone ownership (requires webhook)
    validateZoneOwnership: false
    # Allowed zone patterns per namespace (key: namespace, value: zone patterns)
    allowedZones: {}
    # Example:
    # allowedZones:
    #   tenant-a: ["customer-a.com", "*.customer-a.com"]
    #   tenant-b: ["customer-b.org"]
