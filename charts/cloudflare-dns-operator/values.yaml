# Default values for cloudflare-dns-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cloudflare-dns-operator
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using fullname template
  name: ""

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true

podAnnotations: {}
podLabels: {}

# Pod Security Context
# Compliant with Pod Security Standards "restricted" profile
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532
  fsGroupChangePolicy: "OnRootMismatch"
  seccompProfile:
    type: RuntimeDefault

# Container Security Context
# Compliant with Pod Security Standards "restricted" profile
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  # Metrics port
  metricsPort: 8081

resources:
  limits:
    cpu: 500m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 64Mi

# Metrics configuration
metrics:
  # Enable metrics collection
  enabled: true
  # Metrics endpoint port
  port: 8081
  # Metrics endpoint path
  path: /metrics

  # Service configuration for metrics
  service:
    labels: {}
    annotations: {}

  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    # Enable ServiceMonitor creation
    enabled: false
    # Namespace for ServiceMonitor (if empty, uses release namespace)
    namespace: ""
    # Scrape interval
    interval: 30s
    # Scrape timeout
    scrapeTimeout: 10s
    # Additional labels for ServiceMonitor
    labels: {}
    # Additional annotations for ServiceMonitor
    annotations: {}
    # Honor labels from target
    honorLabels: true
    # Basic auth configuration
    basicAuth: {}
    # Bearer token file path
    bearerTokenFile: ""
    # Bearer token secret
    bearerTokenSecret: {}
    # TLS configuration
    tlsConfig: {}
    # Relabeling rules for metrics
    relabelings: []
    # Metric relabeling rules
    metricRelabelings: []
    # Job label
    jobLabel: ""
    # Target labels
    targetLabels: []
    # Pod target labels
    podTargetLabels: []
    # Sample limit
    sampleLimit: 0
    # Target limit
    targetLimit: 0
    # Label limit
    labelLimit: 0
    # Label name length limit
    labelNameLengthLimit: 0
    # Label value length limit
    labelValueLengthLimit: 0

# Health check configuration
healthChecks:
  enabled: true

  # Liveness probe configuration
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8081
    initialDelaySeconds: 15
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Readiness probe configuration
  readinessProbe:
    httpGet:
      path: /readyz
      port: 8081
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Startup probe configuration (for slow-starting containers)
  startupProbe:
    httpGet:
      path: /healthz
      port: 8081
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

# Profiling configuration
profiling:
  # Enable pprof endpoints for debugging (only in development)
  enabled: false
  # Port for profiling endpoints
  port: 6060

nodeSelector: {}

tolerations: []

affinity: {}

# Cloudflare configuration
cloudflare:
  # Cloudflare account email
  email: ""
  # Cloudflare API Token (if not using existing secret)
  apiToken: ""
  # Name of existing secret containing API token
  apiTokenSecretName: ""
  # Key in the secret containing API token
  apiTokenSecretKey: "api-token"  # pragma: allowlist secret
  # Cloudflare Zone ID (optional, can be auto-discovered)
  zoneId: ""

# Secret Management Configuration
secrets:
  # Secret provider: kubernetes, external-secrets-operator, vault
  provider: kubernetes

  # External Secrets Operator configuration
  externalSecretsOperator:
    # Enable External Secrets Operator integration
    enabled: false
    # Secret store configuration
    secretStore:
      name: cloudflare-secret-store
      kind: SecretStore  # SecretStore or ClusterSecretStore
      # Backend type: vault, aws-secrets-manager, azure-keyvault, etc.
      backend: vault
    # Refresh interval for secrets
    refreshInterval: 1h
    # External secret configuration
    externalSecret:
      name: cloudflare-credentials
      # Data mapping from external secret to Kubernetes secret
      dataFrom:
        - extract:
            key: cloudflare/credentials

  # Vault integration configuration
  vault:
    # Enable Vault integration
    enabled: false
    # Vault server address
    address: https://vault.example.com
    # Authentication method: kubernetes, token, approle
    authMethod: kubernetes
    # Vault path for Cloudflare secrets
    path: secret/data/cloudflare
    # Kubernetes auth configuration
    kubernetes:
      role: cloudflare-operator
      serviceAccount: cloudflare-dns-operator
    # Secret rotation
    rotation:
      enabled: false
      schedule: "0 0 * * 0"  # Weekly rotation

  # Secret encryption at rest
  encryption:
    # Enable encryption at rest (requires encrypted etcd)
    enabled: false
    # KMS provider configuration
    kmsProvider: ""

  # Secret access auditing
  auditing:
    # Enable secret access auditing
    enabled: false
    # Audit log destination
    destination: stdout  # stdout, file, syslog

# Operator configuration
operator:
  # Log level (debug, info, warn, error)
  logLevel: info
  # Enable leader election for controller manager
  leaderElection: true
  # Metrics bind address
  metricsBindAddress: ":8081"
  # Health probe bind address
  healthProbeBindAddress: ":8081"
  # Webhook port
  webhookPort: 9443
  # Enable webhook
  enableWebhook: false

# High Availability configuration
highAvailability:
  # Enable High Availability mode
  enabled: false
  # Number of replicas for HA (minimum 2)
  replicaCount: 2

  # Leader election configuration
  leaderElection:
    # Enable leader election (required for HA)
    enabled: true
    # Lease duration (how long leader holds the lease)
    leaseDuration: 15s
    # Renew deadline (time leader has to renew the lease)
    renewDeadline: 10s
    # Retry period (time to wait between lease renewal attempts)
    retryPeriod: 2s
    # Resource name for leader election
    resourceName: cloudflare-dns-operator-leader
    # Resource namespace (empty means same as deployment namespace)
    resourceNamespace: ""

  # Pod anti-affinity for spreading across nodes
  podAntiAffinity:
    # Enable pod anti-affinity
    enabled: true
    # Preferred (soft) or required (hard) anti-affinity
    type: preferred  # preferred or required
    # Weight for preferred anti-affinity
    weight: 100
    # Topology key for anti-affinity
    topologyKey: kubernetes.io/hostname

  # Pod Disruption Budget
  podDisruptionBudget:
    # Enable PodDisruptionBudget
    enabled: true
    # Minimum available pods during disruptions
    minAvailable: 1
    # Alternative: maximum unavailable pods
    # maxUnavailable: 1

  # Graceful shutdown configuration
  gracefulShutdown:
    # Enable graceful shutdown
    enabled: true
    # Termination grace period in seconds
    terminationGracePeriodSeconds: 30
    # Pre-stop hook delay (allows time for load balancer updates)
    preStopDelay: 5s

# CRD installation
crds:
  # Install CRDs as part of the Helm release
  install: true
  # Keep CRDs on chart uninstall
  keep: true

# Pod Security Standards configuration
podSecurityStandards:
  # Enable Pod Security Standards labels on namespace
  enabled: true
  # Create namespace with Pod Security Standards labels
  createNamespace: false
  # Enforce mode - blocks non-compliant pods
  enforce: restricted
  enforceVersion: latest
  # Audit mode - logs policy violations
  audit: restricted
  auditVersion: latest
  # Warn mode - warns about policy violations
  warn: restricted
  warnVersion: latest

# Network Policy configuration
networkPolicy:
  # Enable NetworkPolicy
  enabled: true
  # Prometheus namespace for metrics scraping
  prometheusNamespace: prometheus-system
  # Prometheus pod labels
  prometheusPodLabels:
    app.kubernetes.io/name: prometheus

# Monitoring configuration
monitoring:
  # Enable ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    honorLabels: true
    metricRelabelings: []
    relabelings: []

  # Grafana dashboards configuration
  grafana:
    # Enable Grafana dashboard deployment
    dashboards:
      enabled: true
      # Namespace where dashboards should be deployed
      namespace: monitoring
      # Labels for dashboard ConfigMaps (for Grafana sidecar discovery)
      labels:
        grafana_dashboard: "1"
        app.kubernetes.io/component: grafana-dashboard
      # Annotations for dashboard ConfigMaps
      annotations:
        grafana_folder: "Cloudflare DNS Operator"

      # Individual dashboard controls
      operatorOverview:
        enabled: true
        title: "Cloudflare DNS Operator - Overview"
      dnsManagement:
        enabled: true
        title: "Cloudflare DNS Operator - DNS Management"
      performanceResource:
        enabled: true
        title: "Cloudflare DNS Operator - Performance & Resources"
      troubleshooting:
        enabled: true
        title: "Cloudflare DNS Operator - Troubleshooting"
      slaTracking:
        enabled: true
        title: "Cloudflare DNS Operator - SLA/SLO Tracking"

  # Prometheus alerting rules configuration
  prometheusRule:
    # Enable PrometheusRule deployment
    enabled: true
    # Namespace for PrometheusRule (if empty, uses release namespace)
    namespace: ""
    # Additional labels for PrometheusRule
    labels: {}
    # Annotations for PrometheusRule
    annotations: {}

    # Alert groups configuration
    groups:
      # Critical alerts
      critical:
        enabled: true
        name: "cloudflare-dns-operator.critical"
        interval: "30s"
        rules:
          operatorDown:
            enabled: true
            severity: "critical"
            description: "Cloudflare DNS Operator is down"
            runbook: >
              https://github.com/devops247-online/k8s-operator-cloudflare
              /blob/main/docs/runbooks/operator-down.md
          highErrorRate:
            enabled: true
            threshold: 0.05  # 5% error rate
            duration: "2m"
            severity: "critical"
            description: "High error rate in Cloudflare DNS Operator"
            runbook: >
              https://github.com/devops247-online/k8s-operator-cloudflare
              /blob/main/docs/runbooks/high-error-rate.md

      # Warning alerts
      warning:
        enabled: true
        name: "cloudflare-dns-operator.warning"
        interval: "30s"
        rules:
          apiRateLimitHigh:
            enabled: true
            threshold: 0.1  # 90% of rate limit used
            duration: "5m"
            severity: "warning"
            description: "Cloudflare API rate limit usage is high"
            runbook: >
              https://github.com/devops247-online/k8s-operator-cloudflare
              /blob/main/docs/runbooks/rate-limit.md
          reconcileLatencyHigh:
            enabled: true
            threshold: 30  # 30 seconds
            duration: "5m"
            severity: "warning"
            description: "Reconcile latency is high"
            runbook: >
              https://github.com/devops247-online/k8s-operator-cloudflare
              /blob/main/docs/runbooks/high-latency.md
          resourceExhaustion:
            enabled: true
            memoryThreshold: 0.9  # 90% memory usage
            cpuThreshold: 0.8     # 80% CPU usage
            duration: "5m"
            severity: "warning"
            description: "Resource usage is high"
            runbook: >
              https://github.com/devops247-online/k8s-operator-cloudflare
              /blob/main/docs/runbooks/resource-exhaustion.md

      # Info alerts
      info:
        enabled: true
        name: "cloudflare-dns-operator.info"
        interval: "60s"
        rules:
          leaderElectionChange:
            enabled: true
            severity: "info"
            description: "Leader election changed"
            runbook: >
              https://github.com/devops247-online/k8s-operator-cloudflare
              /blob/main/docs/runbooks/leader-election.md
          configReload:
            enabled: true
            severity: "info"
            description: "Configuration reloaded"

    # Custom alert rules (user-defined)
    customRules: []
    # Example:
    # customRules:
    #   - alert: CustomAlert
    #     expr: custom_metric > 100
    #     for: 5m
    #     labels:
    #       severity: warning
    #     annotations:
    #       summary: Custom alert fired

  # Alert manager integration
  alertmanager:
    # Enable Alertmanager integration
    enabled: false
    # Notification channels
    notifications:
      slack:
        enabled: false
        webhook: ""
        channel: "#alerts"
        title: "Cloudflare DNS Operator Alert"
      email:
        enabled: false
        to: []
        from: "alerts@example.com"
        subject: "Cloudflare DNS Operator Alert"
      pagerduty:
        enabled: false
        serviceKey: ""
      webhook:
        enabled: false
        url: ""
        headers: {}

  ingress: []
  egress:
    - ports:
        - port: 443
          protocol: TCP
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP

# Security Hardening Configuration
securityHardening:
  # Image security scanning
  imageScanning:
    # Enable image vulnerability scanning
    enabled: false
    # Scanner to use: trivy, snyk, grype
    scanner: trivy
    # Fail on critical vulnerabilities
    failOnCritical: true
    # Severity levels to report: CRITICAL, HIGH, MEDIUM, LOW
    severityLevels:
      - CRITICAL
      - HIGH
    # Ignore specific CVEs
    ignoreCVEs: []

  # Image signing and verification
  imageSigning:
    # Enable image signing verification
    enabled: false
    # Cosign public key for verification
    cosignPublicKey: ""
    # Policy enforcement mode: enforce, warn, disabled
    policyMode: enforce

  # Admission controller policies
  admissionController:
    # Enable admission controller policies
    enabled: false
    # Policy engine: opa, kyverno, polaris
    engine: opa
    # Policy rules
    policies:
      # Require security contexts
      requireSecurityContext: true
      # Disallow privileged containers
      disallowPrivileged: true
      # Require non-root user
      requireNonRoot: true
      # Require read-only root filesystem
      requireReadOnlyRootFS: true

  # Runtime security monitoring
  runtimeSecurity:
    # Enable runtime security monitoring
    enabled: false
    # Runtime security provider: falco, sysdig
    provider: falco
    # Alert on suspicious activity
    alerting:
      enabled: false
      webhook: ""

  # Compliance and benchmarks
  compliance:
    # Enable compliance checking
    enabled: false
    # Benchmarks to check: cis-kubernetes, nsa-kubernetes
    benchmarks:
      - cis-kubernetes
      - nsa-kubernetes
    # Generate compliance reports
    reporting:
      enabled: false
      schedule: "0 0 * * 0"  # Weekly

  # Security monitoring hooks
  monitoring:
    # Enable security event monitoring
    enabled: false
    # Export security metrics
    metrics:
      enabled: false
      port: 9091
    # Security event webhook
    webhook:
      enabled: false
      url: ""

# Horizontal Pod Autoscaler configuration
horizontalPodAutoscaler:
  # Enable HPA
  enabled: false
  # Minimum number of replicas
  minReplicas: 1
  # Maximum number of replicas
  maxReplicas: 10
  # Target CPU utilization percentage
  targetCPUUtilizationPercentage: 80
  # Target memory utilization percentage
  targetMemoryUtilizationPercentage: 80

  # Custom metrics configuration
  customMetrics:
    # Enable custom metrics for HPA decisions
    enabled: false
    # Metrics configuration
    metrics:
      # Queue depth metric (number of pending reconcile requests)
      queueDepth:
        enabled: true
        targetValue: 10
      # Reconcile rate metric (reconciles per second)
      reconcileRate:
        enabled: true
        targetValue: 5
      # Error rate metric (errors per minute)
      errorRate:
        enabled: true
        targetValue: 2
      # API response time metric (milliseconds)
      apiResponseTime:
        enabled: false
        targetValue: 1000

  # HPA behavior configuration (for Kubernetes 1.23+)
  behavior:
    # Scale up behavior
    scaleUp:
      # Policy for scaling up
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      # Stabilization window for scale up
      stabilizationWindowSeconds: 60
      # Select policy with the highest change
      selectPolicy: Max

    # Scale down behavior
    scaleDown:
      # Policy for scaling down
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      # Stabilization window for scale down
      stabilizationWindowSeconds: 300
      # Select policy with the lowest change
      selectPolicy: Min

# Performance tuning configuration
performance:
  # Controller performance settings
  controller:
    # Max concurrent reconciles
    maxConcurrentReconciles: 5
    # Reconcile timeout in seconds
    reconcileTimeout: 300
    # Requeue interval for successful reconciles (seconds)
    requeueInterval: 300
    # Requeue interval for failed reconciles (seconds)
    requeueIntervalOnError: 60

    # Rate limiter configuration
    rateLimiter:
      # Base delay for rate limiter (milliseconds)
      baseDelay: 5
      # Maximum delay for rate limiter (seconds)
      maxDelay: 300
      # Failure threshold before backing off
      failureThreshold: 5
      # Bucket size for token bucket rate limiter
      bucketSize: 100
      # Fill rate for token bucket (tokens per second)
      fillRate: 10

    # Cache configuration
    cache:
      # Cache sync timeout (seconds)
      syncTimeout: 120
      # Resync period for cached objects (seconds)
      resyncPeriod: 600
      # Enable cache metrics
      metricsEnabled: true

    # Batch processing configuration
    batch:
      # Enable batch processing
      enabled: false
      # Batch size for processing multiple resources
      size: 10
      # Batch timeout (milliseconds)
      timeout: 1000
      # Maximum wait time before processing batch (milliseconds)
      maxWait: 5000

  # Resource optimization settings
  resources:
    # CPU optimization
    cpu:
      # Enable CPU profiling
      profilingEnabled: false
      # CPU request multiplier based on load
      requestMultiplier: 1.0
      # CPU limit multiplier based on load
      limitMultiplier: 1.5

    # Memory optimization
    memory:
      # Enable memory profiling
      profilingEnabled: false
      # Memory request multiplier based on load
      requestMultiplier: 1.0
      # Memory limit multiplier based on load
      limitMultiplier: 2.0
      # Enable Go garbage collection tuning
      gcTuning:
        enabled: false
        # Target GC percentage
        gogc: 100
        # Memory limit as percentage of container limit
        memlimit: 90

  # Monitoring and alerting
  monitoring:
    # Enable performance metrics
    metricsEnabled: true
    # Metrics collection interval (seconds)
    metricsInterval: 30
    # Enable custom performance metrics
    customMetrics:
      enabled: true
      # Export interval for custom metrics (seconds)
      exportInterval: 15

    # Alerting thresholds
    alerts:
      # CPU usage alert threshold (percentage)
      cpuThreshold: 85
      # Memory usage alert threshold (percentage)
      memoryThreshold: 90
      # Error rate alert threshold (errors per minute)
      errorRateThreshold: 5
      # Queue depth alert threshold
      queueDepthThreshold: 20
      # API response time alert threshold (milliseconds)
      responseTimeThreshold: 2000

# Multi-tenancy configuration
multitenancy:
  # Enable multi-tenancy features
  enabled: false

  # Deployment scope: cluster, namespace, multi-namespace
  scope: cluster

  # Specific namespaces to watch (only for multi-namespace scope)
  watchNamespaces: []

  # Tenant isolation
  networkPolicies:
    # Enable network policies for tenant isolation
    enabled: false

  # Resource management per tenant
  resourceQuotas:
    # Enable resource quotas for tenants
    enabled: false
    limits:
      # Maximum number of CloudflareRecord resources per namespace
      maxRecords: 100
      # CPU and memory limits for tenant workloads
      cpu: "1000m"
      memory: "512Mi"

  # Tenant validation
  validation:
    # Enforce that CloudflareRecord can only use secrets from same namespace
    enforceNamespaceSecrets: true
    # Validate zone ownership (requires webhook)
    validateZoneOwnership: false
    # Allowed zone patterns per namespace (key: namespace, value: zone patterns)
    allowedZones: {}
    # Example:
    # allowedZones:
    #   tenant-a: ["customer-a.com", "*.customer-a.com"]
    #   tenant-b: ["customer-b.org"]

# Configuration management
config:
  # Enable configuration management via ConfigMap
  enabled: true

  # Configuration format: json, yaml, or individual (separate keys)
  format: yaml

  # Use structured config file (config.json/config.yaml) or individual keys
  file: true

  # Annotations to add to the ConfigMap
  annotations: {}

  # Environment-specific configuration
  environment: production

  # Operator configuration
  operator:
    logLevel: info
    reconcileInterval: "5m"
    metricsBindAddress: ":8080"
    healthProbeBindAddress: ":8081"
    leaderElection: true

  # Cloudflare API configuration
  cloudflare:
    apiTimeout: "30s"
    rateLimitRPS: 10
    retryAttempts: 3
    retryDelay: "1s"

  # Feature flags configuration
  features:
    enableWebhooks: true
    enableMetrics: true
    enableTracing: false
    experimentalFeatures: false
    # Custom feature flags
    customFlags: {}
    # Example:
    # customFlags:
    #   newFeature: true
    #   betaAPI: false

  # Performance tuning configuration
  performance:
    maxConcurrentReconciles: 5
    resyncPeriod: "10m"
    leaderElectionLeaseDuration: "15s"
    leaderElectionRenewDeadline: "10s"
    leaderElectionRetryPeriod: "2s"

  # Custom configuration keys (for individual format)
  custom: {}
  # Example:
  # custom:
  #   specialSetting: "value"
  #   debugMode: "true"

# Structured Logging configuration
logging:
  # Enable structured logging
  enabled: true

  # Log level: debug, info, warn, error
  level: info

  # Log format: json, console
  format: json

  # Development mode (enables caller info, stack traces)
  development: false

  # Output destinations (stdout, stderr, file paths)
  outputs:
    - stdout

  # Log sampling configuration
  sampling:
    # Enable log sampling to reduce log volume
    enabled: false
    # Initial number of logs to always emit
    initial: 100
    # After initial, emit every Nth log entry
    thereafter: 100

  # Environment-specific overrides
  environments:
    development:
      level: debug
      format: console
      development: true
      sampling:
        enabled: false
    staging:
      level: info
      format: json
      development: false
      sampling:
        enabled: true
        initial: 100
        thereafter: 100
    production:
      level: info
      format: json
      development: false
      sampling:
        enabled: true
        initial: 50
        thereafter: 200

# Distributed Tracing configuration
tracing:
  # Enable distributed tracing
  enabled: false

  # Service name for tracing
  serviceName: cloudflare-dns-operator

  # Service version for tracing
  serviceVersion: ""  # Uses chart appVersion if empty

  # Deployment environment
  environment: production

  # Trace exporter configuration
  exporter:
    # Exporter type: otlp, console, none
    type: otlp
    # OTLP endpoint for traces
    endpoint: http://jaeger-collector:14268/api/traces
    # Request timeout
    timeout: 30s
    # Use insecure connection
    insecure: false
    # Custom headers for exporter
    headers: {}
    # Compression: gzip, none
    compression: gzip

  # Trace sampling configuration
  sampling:
    # Sampling type: always, never, trace_id_ratio, parent_based
    type: parent_based
    # Sampling ratio (0.0 to 1.0) for trace_id_ratio and parent_based
    ratio: 0.1

  # Custom resource attributes
  resourceAttributes: {}

  # Environment-specific overrides
  environments:
    development:
      enabled: true
      exporter:
        type: console
        endpoint: ""
      sampling:
        type: always
        ratio: 1.0
    staging:
      enabled: true
      exporter:
        type: otlp
        endpoint: http://jaeger-collector.monitoring:14268/api/traces
      sampling:
        type: trace_id_ratio
        ratio: 0.5
    production:
      enabled: false
      exporter:
        type: otlp
        endpoint: http://jaeger-collector.monitoring:14268/api/traces
      sampling:
        type: parent_based
        ratio: 0.1

# SLO (Service Level Objectives) configuration
slo:
  # Enable SLO monitoring
  enabled: false

  # SLO targets configuration
  targets:
    # Availability target percentage (e.g., 99.9 = 99.9% uptime)
    availability: 99.9
    # Success rate target percentage (e.g., 99.5 = 99.5% of requests succeed)
    successRate: 99.5
    # Latency P95 target (95th percentile response time)
    latencyP95: 30s
    # Latency P99 target (99th percentile response time)
    latencyP99: 60s
    # Minimum throughput (requests per minute)
    throughputMin: 10.0

  # Error budget configuration
  errorBudget:
    # Rolling window for error budget calculation (in days)
    windowDays: 30
    # Alert thresholds for error budget consumption
    alertThresholds:
      # Warning when 50% of error budget is consumed
      warning: 0.5
      # Critical when 90% of error budget is consumed
      critical: 0.9
    # Error budget policies (actions to take at different consumption levels)
    policies:
      - threshold: 0.5
        action: notify
        description: "Notify team when 50% of error budget is consumed"
      - threshold: 0.75
        action: slow_deployment
        description: "Slow deployments when 75% of error budget consumed"
      - threshold: 0.9
        action: freeze_deployments
        description: "Freeze deployments when 90% of error budget consumed"

  # Time windows for SLI calculation
  windows:
    - name: "5m"
      duration: 5m
      shortTerm: true
    - name: "30m"
      duration: 30m
      shortTerm: true
    - name: "1h"
      duration: 1h
      shortTerm: false
    - name: "6h"
      duration: 6h
      shortTerm: false
    - name: "1d"
      duration: 24h
      shortTerm: false
    - name: "30d"
      duration: 720h  # 30 days
      shortTerm: false

  # Multi-window, multi-burn-rate alerting configuration
  alerting:
    # Page alerts for critical issues (fast burn)
    pageAlerts:
      enabled: true
      shortWindow: 5m
      longWindow: 1h
      burnRateThreshold: 14.4  # Consumes monthly budget in ~6 hours
      severity: critical
    # Ticket alerts for slower burns
    ticketAlerts:
      enabled: true
      shortWindow: 30m
      longWindow: 6h
      burnRateThreshold: 6.0   # Consumes monthly budget in ~3 days
      severity: warning

  # Prometheus recording rules configuration
  recordingRules:
    # Enable automatic generation of recording rules
    enabled: true
    # Namespace for PrometheusRule CRD (empty = release namespace)
    namespace: ""
    # Name for the PrometheusRule resource
    name: slo-recording-rules
    # Additional labels for PrometheusRule
    labels:
      app.kubernetes.io/component: slo-monitoring
      prometheus: kube-prometheus
      role: alert-rules
    # Additional annotations
    annotations:
      description: "SLO recording rules for Cloudflare DNS Operator"
    # Rule groups configuration
    groups:
      sli:
        name: "cloudflare-dns-operator.sli"
        interval: 30s
      burnRate:
        name: "cloudflare-dns-operator.slo.burn_rate"
        interval: 30s
      errorBudget:
        name: "cloudflare-dns-operator.slo.error_budget"
        interval: 1m
      multiWindow:
        name: "cloudflare-dns-operator.slo.multi_window"
        interval: 30s

  # Environment-specific SLO configurations
  environments:
    development:
      enabled: true
      targets:
        availability: 95.0    # Lower targets for dev
        successRate: 90.0
        latencyP95: 60s
        latencyP99: 120s
        throughputMin: 1.0
      errorBudget:
        windowDays: 7         # Shorter window for dev
        alertThresholds:
          warning: 0.7
          critical: 0.9
      alerting:
        pageAlerts:
          enabled: false      # No paging in dev
        ticketAlerts:
          enabled: true
          severity: info
    staging:
      enabled: true
      targets:
        availability: 99.0    # Moderate targets for staging
        successRate: 98.0
        latencyP95: 45s
        latencyP99: 90s
        throughputMin: 5.0
      errorBudget:
        windowDays: 14        # Medium window for staging
        alertThresholds:
          warning: 0.6
          critical: 0.85
      alerting:
        pageAlerts:
          enabled: false      # No paging in staging
        ticketAlerts:
          enabled: true
          severity: warning
    production:
      enabled: true
      targets:
        availability: 99.9    # Strict targets for production
        successRate: 99.5
        latencyP95: 30s
        latencyP99: 60s
        throughputMin: 10.0
      errorBudget:
        windowDays: 30        # Full monthly window
        alertThresholds:
          warning: 0.5
          critical: 0.9
      alerting:
        pageAlerts:
          enabled: true
          severity: critical
        ticketAlerts:
          enabled: true
          severity: warning

# Reliability patterns configuration
reliability:
  # Enable reliability features
  enabled: false

  # Circuit breaker configuration
  circuitBreaker:
    # Enable circuit breaker for Cloudflare API calls
    enabled: true
    # Circuit breaker name
    name: cloudflare-api
    # Maximum requests allowed when circuit is half-open
    maxRequests: 3
    # Interval to clear the internal Counts
    interval: 60s
    # Timeout for circuit breaker to transition from open to half-open
    timeout: 30s
    # Failure rate threshold to trip the circuit (0.0-1.0)
    failureRateThreshold: 0.6
    # Minimum number of requests before considering failure rate
    minimumRequests: 5

  # Retry logic configuration
  retry:
    # Enable retry logic with exponential backoff
    enabled: true
    # Maximum number of retry attempts
    maxAttempts: 3
    # Initial backoff delay
    initialDelay: 1s
    # Maximum backoff delay
    maxDelay: 30s
    # Backoff multiplier
    multiplier: 2.0
    # Add jitter to prevent thundering herd
    jitter: true
    # Maximum jitter as percentage of delay (0.0-1.0)
    maxJitter: 0.1
    # Retryable HTTP status codes
    retryableStatusCodes:
      - 429  # Too Many Requests
      - 500  # Internal Server Error
      - 502  # Bad Gateway
      - 503  # Service Unavailable
      - 504  # Gateway Timeout
    # Retryable error types
    retryableErrors:
      - "context deadline exceeded"
      - "connection refused"
      - "connection reset"

  # Rate limiter configuration
  rateLimiter:
    # Enable rate limiting for Cloudflare API calls
    enabled: true
    # Rate limiter type: token_bucket, sliding_window, fixed_window
    type: token_bucket
    # Requests per second
    requestsPerSecond: 4.0    # Cloudflare limit is 1200/5min = 4/sec
    # Burst size (max tokens in bucket)
    burstSize: 10
    # Window size for rate limiting
    windowSize: 1s
    # Backoff strategy when rate limited: block, reject, adaptive
    backoffStrategy: block
    # Callback function when rate limited (for monitoring)
    onRateLimited:
      enabled: true
      # Log rate limiting events
      logEvents: true
      # Emit metrics for rate limiting
      emitMetrics: true

  # Reliability metrics configuration
  metrics:
    # Enable reliability metrics collection
    enabled: true
    # Metrics prefix
    prefix: cloudflare_dns_operator_reliability
    # Circuit breaker metrics
    circuitBreaker:
      enabled: true
      # Metrics to collect
      metrics:
        - requests_total
        - failures_total
        - successes_total
        - state_changes_total
        - current_state
    # Retry metrics
    retry:
      enabled: true
      metrics:
        - attempts_total
        - successes_total
        - failures_total
        - backoff_duration_seconds
    # Rate limiter metrics
    rateLimiter:
      enabled: true
      metrics:
        - requests_allowed_total
        - requests_rejected_total
        - current_tokens
        - wait_duration_seconds

  # Environment-specific reliability configurations
  environments:
    development:
      circuitBreaker:
        enabled: false        # Disable circuit breaker in dev
      retry:
        maxAttempts: 2        # Fewer retries in dev
        maxDelay: 10s
      rateLimiter:
        requestsPerSecond: 10.0  # Higher rate limit for dev
        backoffStrategy: reject  # Fail fast in dev
    staging:
      circuitBreaker:
        enabled: true
        failureRateThreshold: 0.7  # Higher threshold for staging
      retry:
        maxAttempts: 3
        maxDelay: 20s
      rateLimiter:
        requestsPerSecond: 6.0     # Moderate rate limit
        backoffStrategy: block
    production:
      circuitBreaker:
        enabled: true
        failureRateThreshold: 0.6  # Strict threshold for production
      retry:
        maxAttempts: 3
        maxDelay: 30s
      rateLimiter:
        requestsPerSecond: 4.0     # Conservative rate limit
        backoffStrategy: block
